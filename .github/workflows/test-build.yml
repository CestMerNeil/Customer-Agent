name: Test Build (Development)

on:
  push:
    branches: [ develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  APP_NAME: "拼多多智能客服系统"
  PYTHON_VERSION: "3.11"

jobs:
  test-windows:
    name: Test Windows Build
    runs-on: windows-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Test Import
      run: |
        python -c "
        try:
            from PyQt6.QtWidgets import QApplication
            from qfluentwidgets import FluentWindow
            import playwright
            print('✅ 所有关键依赖导入成功')
        except ImportError as e:
            print(f'❌ 依赖导入失败: {e}')
            exit(1)
        "
    
    - name: Quick Build Test
      run: |
        # 创建最小化的测试构建
        pyinstaller --onefile --console --name="test-build" app.py
        if (Test-Path "dist/test-build.exe") {
          Write-Host "✅ Windows 测试构建成功"
        } else {
          Write-Host "❌ Windows 测试构建失败"
          exit 1
        }
      shell: powershell

  test-macos:
    name: Test macOS Build
    runs-on: macos-14  # Apple Silicon
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Test Import
      run: |
        python -c "
        try:
            from PyQt6.QtWidgets import QApplication
            from qfluentwidgets import FluentWindow
            import playwright
            print('✅ 所有关键依赖导入成功')
        except ImportError as e:
            print(f'❌ 依赖导入失败: {e}')
            exit(1)
        "
    
    - name: Quick Build Test
      run: |
        # 创建最小化的测试构建
        pyinstaller --onefile --console --name="test-build" --target-arch="arm64" app.py
        if [ -f "dist/test-build" ]; then
          echo "✅ macOS 测试构建成功"
        else
          echo "❌ macOS 测试构建失败"
          exit 1
        fi

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Quality Tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Check Code Style
      run: |
        echo "🔍 检查代码风格..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check Import Order
      run: |
        echo "📦 检查导入顺序..."
        isort . --check-only --diff
      continue-on-error: true
    
    - name: Check Code Formatting
      run: |
        echo "🎨 检查代码格式..."
        black . --check --diff
      continue-on-error: true